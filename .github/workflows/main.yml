name: Deploy Medusa Backend to AWS ECS Fargate

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch

env:
  AWS_REGION: ap-south-1 # IMPORTANT: Change to your chosen AWS region (e.g., us-east-1, ap-south-1)
  PROJECT_NAME: ${{ vars.PROJECT_NAME }}
  ECR_REPOSITORY: medusa-backend # Must match the ECR repository name in terraform/modules/ecs-fargate/main.tf
  ECS_CLUSTER: ${{ vars.PROJECT_NAME }}-cluster
  ECS_SERVICE: ${{ vars.PROJECT_NAME }}-medusa-backend-service
  ECS_CONTAINER_NAME: medusa-backend # Must match the container name in ECS task definition
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
  STORE_CORS: ${{ vars.STORE_CORS }}
  ADMIN_CORS: ${{ vars.ADMIN_CORS }}
  AUTH_CORS: ${{ vars.AUTH_CORS }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  COOKIE_SECRET: ${{ secrets.COOKIE_SECRET }}
  NODE_ENV: production # Set the Node.js environment to production

permissions:
  contents: read
  packages: write # Needed for pushing Docker images to GitHub Packages (if used)
  id-token: write # Needed for OIDC if you switch from Access Keys

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production # Using a GitHub environment for better security and organization

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2" # Specify a compatible version, e.g., "1.8.x" or ">=1.0.0"

      - name: Terraform Init
        run: terraform init -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" -backend-config="key=${{ env.PROJECT_NAME }}/terraform.tfstate" -backend-config="region=${{ env.AWS_REGION }}" -backend-config="dynamodb_table=terraform-lock-table"
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan -var="aws_region=${{ env.AWS_REGION }}" -var="db_username=${{ env.DB_USERNAME }}" -var="db_password=${{ env.DB_PASSWORD }}" -var="store_cors=${{ env.STORE_CORS }}" -var="admin_cors=${{ env.ADMIN_CORS }}" -var="auth_cors=${{ env.AUTH_CORS }}"
        working-directory: ./terraform

      - name: Terraform Apply
        id: terraform-apply-step # Added ID to this step to reference its outputs (though not directly used for task-def input)
        run: terraform apply -auto-approve -var="aws_region=${{ env.AWS_REGION }}" -var="db_username=${{ env.DB_USERNAME }}" -var="db_password=${{ env.DB_PASSWORD }}" -var="store_cors=${{ env.STORE_CORS }}" -var="admin_cors=${{ env.ADMIN_CORS }}" -var="auth_cors=${{ env.AUTH_CORS }}"
        working-directory: ./terraform

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get ECR Repository URI
        id: get-ecr-uri
        run: echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}" >> $GITHUB_ENV

      - name: Build and push Docker image
        id: build-and-push-image # Added ID to this step
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} -f medusa-backend/Dockerfile .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          # Output the full image URI for later steps
          echo "IMAGE_URI=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

           # --- NEW MIGRATION STEP ---
      - name: Run Medusa DB Migrations
        uses: aws-actions/amazon-ecs-run-task@v1
        with:
          # Use the task definition family from your env vars
          task-definition: ${{ env.ECS_TASK_DEFINITION }} 
          cluster: ${{ env.ECS_CLUSTER }}
          # Use the image that was just built
          image: ${{ steps.build-and-push-image.outputs.IMAGE_URI }}
          # IMPORTANT: Override the command for the migration task
          # Use /bin/sh -c and explicitly set DATABASE_URL inline
          override-container-command: |
            ["/bin/sh", "-c", "DATABASE_URL=postgresql://${{ env.DB_USERNAME }}:${{ env.DB_PASSWORD }}@${{ env.DB_ENDPOINT }}:5432/${{ env.DB_NAME }} yarn run medusa db:setup"]
          
          # --- IMPORTANT: REPLACE THESE WITH YOUR ACTUAL VPC SUBNET AND SECURITY GROUP IDs ---
          # These should be your PRIVATE subnets where your Fargate tasks can reach RDS/Redis
          subnets: "subnet-0abcdef1234567890,subnet-0fedcba9876543210" # <-- REPLACE WITH YOUR PRIVATE SUBNET IDs
          # The security group that allows outbound connections to RDS (port 5432) and Redis (port 6379)
          security-groups: "sg-0123456789abcdef0" # <-- REPLACE WITH YOUR APP/DATABASE SECURITY GROUP ID
          
          # Wait for the task to complete
          wait-for-task-started: true
          wait-for-task-stopped: true
          
          # Optional: You can also specify CPU/Memory for the migration task if it needs less
          # cpu: "256"
          # memory: "512"

      # --- END NEW MIGRATION STEP ---

      # NEW STEP: Fetch the latest Task Definition JSON from AWS
      - name: Fetch current ECS Task Definition
        id: fetch-task-definition
        run: |
          # Get the latest active task definition ARN for the service
          TASK_DEF_ARN=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query 'services[0].taskDefinition' --output text)
          echo "Fetched Task Definition ARN: $TASK_DEF_ARN"

          # Describe the task definition and output its JSON to a file
          aws ecs describe-task-definition --task-definition $TASK_DEF_ARN --query 'taskDefinition' > task-definition.json

          # Set the task definition file path as an output for this step
          echo "TASK_DEFINITION_FILE=task-definition.json" >> $GITHUB_OUTPUT

      # NEW STEP: Render the Task Definition with the new image
      - name: Render new ECS task definition with updated image
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.fetch-task-definition.outputs.TASK_DEFINITION_FILE }} # Use the fetched JSON file
          container-name: ${{ env.ECS_CONTAINER_NAME }} # Your Medusa container name
          image: ${{ steps.build-and-push-image.outputs.IMAGE_URI }} # Use the image URI from the build step

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }} # Use the output from the render step
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true